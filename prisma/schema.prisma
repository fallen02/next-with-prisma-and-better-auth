// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Series {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String
  origin    String
  overview  String?  @db.Text
  status    String
  poster    String
  backdrop  String
  rating    Float
  fldId     String //folderId from filemoon
  tmdbId    String
  genre     String[]
  createdAt DateTime @default(now())

  // Relations
  seasons Season[]
  // @@index([origin])

  @@index([slug])
  @@index([title])
  @@map("series")
}

model Season {
  id           Int      @id @default(autoincrement())
  title        String
  overview     String?  @db.Text
  seasonNumber Int
  episodeCount Int
  fldId        String //folderId from filemoon
  createdAt    DateTime @default(now())

  // Relations
  seriesId Int
  series   Series    @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  episodes Episode[]

  @@index([title])
  @@index([episodeCount])
  @@map("season")
}

model Episode {
  id            Int      @id @default(autoincrement())
  title         String
  episodeNumber Int  
  fileID        String //folderId from filemoon
  hslUrl        String
  createdAt     DateTime @default(now())

  // Relations
  seasonId Int
  season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  // @@index([origin])

  @@index([title])
  @@index([hslUrl])
  @@index([episodeNumber])
  @@map("episode")
}
